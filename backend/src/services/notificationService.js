const nodemailer = require("nodemailer");
const twilio = require("twilio");

class NotificationService {
  constructor() {
    // Initialize email transporter only if configured
    this.emailTransporter = null;
    if (process.env.EMAIL_HOST && process.env.EMAIL_USER) {
      this.emailTransporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST,
        port: process.env.EMAIL_PORT,
        secure: process.env.EMAIL_PORT === "465",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });
    }

    // Initialize Twilio client only if configured with valid values
    this.twilioClient = null;
    if (
      process.env.TWILIO_ACCOUNT_SID &&
      process.env.TWILIO_AUTH_TOKEN &&
      process.env.TWILIO_ACCOUNT_SID.startsWith("AC")
    ) {
      this.twilioClient = twilio(
        process.env.TWILIO_ACCOUNT_SID,
        process.env.TWILIO_AUTH_TOKEN
      );
    }
  }

  /**
   * Send winning voucher notification
   */
  async sendWinNotification(userProfile, voucher, voucherCode) {
    const promises = [];

    // Send email if available
    if (userProfile.email) {
      promises.push(this.sendWinEmail(userProfile, voucher, voucherCode));
    }

    // Send SMS if available and Twilio is configured
    if (userProfile.phone && this.twilioClient) {
      promises.push(this.sendWinSMS(userProfile, voucher, voucherCode));
    }

    try {
      await Promise.allSettled(promises);
      console.log("Notifications sent successfully");
    } catch (error) {
      console.error("Error sending notifications:", error);
      // Don't throw - notification failure shouldn't break the main flow
    }
  }

  /**
   * Send winning email
   */
  async sendWinEmail(userProfile, voucher, voucherCode) {
    if (!this.emailTransporter) {
      console.log("Email not configured - skipping email notification");
      return;
    }

    const emailTemplate = this.generateWinEmailTemplate(
      userProfile,
      voucher,
      voucherCode
    );

    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: userProfile.email,
      subject: "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng phi·∫øu may m·∫Øn!",
      html: emailTemplate,
      text: this.generateWinEmailText(userProfile, voucher, voucherCode),
    };

    try {
      await this.emailTransporter.sendMail(mailOptions);
      console.log("Win email sent to:", userProfile.email);
    } catch (error) {
      console.error("Failed to send win email:", error);
      throw error;
    }
  }

  /**
   * Send winning SMS
   */
  async sendWinSMS(userProfile, voucher, voucherCode) {
    const message = `üéâ Ch√∫c m·ª´ng ${userProfile.full_name}! B·∫°n ƒë√£ tr√∫ng: ${
      voucher.face_value
    }! M√£ c·ªßa b·∫°n: ${voucherCode}. C√≥ hi·ªáu l·ª±c ƒë·∫øn ${
      voucher.valid_to || "ng√†y ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"
    }. √Åp d·ª•ng ƒëi·ªÅu kho·∫£n.`;

    try {
      await this.twilioClient.messages.create({
        body: message,
        from: process.env.TWILIO_PHONE_NUMBER,
        to: userProfile.phone,
      });
      console.log("Win SMS sent to:", userProfile.phone);
    } catch (error) {
      console.error("Failed to send win SMS:", error);
      throw error;
    }
  }

  /**
   * Send participation confirmation
   */
  async sendParticipationConfirmation(userProfile) {
    if (!userProfile.email || !this.emailTransporter) return;

    const emailTemplate = this.generateParticipationEmailTemplate(userProfile);

    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: userProfile.email,
      subject: "C·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆∞∆°ng tr√¨nh quay s·ªë may m·∫Øn!",
      html: emailTemplate,
      text: `K√≠nh g·ª≠i ${userProfile.full_name}, c·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆∞∆°ng tr√¨nh quay s·ªë may m·∫Øn c·ªßa ch√∫ng t√¥i! Ch√∫c b·∫°n may m·∫Øn!`,
    };

    try {
      await this.emailTransporter.sendMail(mailOptions);
      console.log("Participation email sent to:", userProfile.email);
    } catch (error) {
      console.error("Failed to send participation email:", error);
      // Don't throw for participation emails
    }
  }

  /**
   * Generate winning email HTML template
   */
  generateWinEmailTemplate(userProfile, voucher, voucherCode) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng!</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
            .content { padding: 30px; }
            .voucher-box { background: #f8f9ff; border: 2px dashed #667eea; border-radius: 10px; padding: 20px; margin: 20px 0; text-align: center; }
            .code { font-size: 24px; font-weight: bold; color: #667eea; letter-spacing: 2px; margin: 10px 0; }
            .btn { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { background: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéâ Ch√∫c m·ª´ng!</h1>
                <p>B·∫°n l√† ng∆∞·ªùi may m·∫Øn tr√∫ng th∆∞·ªüng!</p>
            </div>
            <div class="content">
                <p>K√≠nh g·ª≠i <strong>${userProfile.full_name}</strong>,</p>
                <p>Tin tuy·ªát v·ªùi! B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng trong ch∆∞∆°ng tr√¨nh quay s·ªë may m·∫Øn c·ªßa ch√∫ng t√¥i!</p>
                
                <div class="voucher-box">
                    <h3>Ph·∫ßn th∆∞·ªüng c·ªßa b·∫°n:</h3>
                    <h2>${voucher.name}</h2>
                    <p><strong>${voucher.face_value}</strong></p>
                    <div class="code">${voucherCode}</div>
                    <p><small>M√£ phi·∫øu mua h√†ng duy nh·∫•t c·ªßa b·∫°n</small></p>
                </div>

                <h4>C√°ch s·ª≠ d·ª•ng phi·∫øu mua h√†ng:</h4>
                <ol>
                    <li>Sao ch√©p m√£ phi·∫øu mua h√†ng ·ªü tr√™n</li>
                    <li>Truy c·∫≠p website ho·∫∑c c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i</li>
                    <li>Nh·∫≠p m√£ khi thanh to√°n</li>
                    <li>T·∫≠n h∆∞·ªüng ∆∞u ƒë√£i c·ªßa b·∫°n!</li>
                </ol>

                <p><strong>Quan tr·ªçng:</strong></p>
                <ul>
                    <li>Phi·∫øu n√†y c√≥ hi·ªáu l·ª±c ƒë·∫øn ${
                      voucher.valid_to || "ng√†y h·∫øt h·∫°n ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"
                    }</li>
                    <li>Kh√¥ng th·ªÉ k·∫øt h·ª£p v·ªõi c√°c ∆∞u ƒë√£i kh√°c</li>
                    <li>Ch·ªâ s·ª≠ d·ª•ng m·ªôt l·∫ßn</li>
                    <li>Kh√¥ng th·ªÉ chuy·ªÉn nh∆∞·ª£ng</li>
                </ul>

                <div style="text-align: center;">
                    <a href="#" class="btn">Mua s·∫Øm ngay</a>
                </div>
            </div>
            <div class="footer">
                <p>C·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆∞∆°ng tr√¨nh quay s·ªë may m·∫Øn c·ªßa ch√∫ng t√¥i!</p>
                <p>C√≥ c√¢u h·ªèi? Li√™n h·ªá ch√∫ng t√¥i t·∫°i support@luckyvoucher.com</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Generate winning email text version
   */
  generateWinEmailText(userProfile, voucher, voucherCode) {
    return `
üéâ Ch√∫c m·ª´ng ${userProfile.full_name}!

B·∫°n ƒë√£ tr√∫ng th∆∞·ªüng trong ch∆∞∆°ng tr√¨nh quay s·ªë may m·∫Øn c·ªßa ch√∫ng t√¥i!

Ph·∫ßn th∆∞·ªüng c·ªßa b·∫°n: ${voucher.name}
Gi√° tr·ªã: ${voucher.face_value}
M√£: ${voucherCode}

C√°ch s·ª≠ d·ª•ng:
1. Sao ch√©p m√£ phi·∫øu mua h√†ng: ${voucherCode}
2. Truy c·∫≠p website ho·∫∑c c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i
3. Nh·∫≠p m√£ khi thanh to√°n
4. T·∫≠n h∆∞·ªüng ∆∞u ƒë√£i c·ªßa b·∫°n!

Quan tr·ªçng:
- C√≥ hi·ªáu l·ª±c ƒë·∫øn ${voucher.valid_to || "ng√†y ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"}
- Kh√¥ng th·ªÉ k·∫øt h·ª£p v·ªõi c√°c ∆∞u ƒë√£i kh√°c
- Ch·ªâ s·ª≠ d·ª•ng m·ªôt l·∫ßn
- Kh√¥ng th·ªÉ chuy·ªÉn nh∆∞·ª£ng

C·∫£m ∆°n b·∫°n ƒë√£ tham gia!
C√≥ c√¢u h·ªèi? Li√™n h·ªá support@luckyvoucher.com
    `;
  }

  /**
   * Generate participation confirmation email template
   */
  generateParticipationEmailTemplate(userProfile) {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; padding: 30px; }
            .header { text-align: center; margin-bottom: 30px; }
            .content { margin-bottom: 20px; }
            .footer { text-align: center; font-size: 12px; color: #666; margin-top: 30px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üçÄ C·∫£m ∆°n b·∫°n ƒë√£ tham gia!</h1>
            </div>
            <div class="content">
                <p>K√≠nh g·ª≠i <strong>${userProfile.full_name}</strong>,</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆∞∆°ng tr√¨nh quay s·ªë may m·∫Øn c·ªßa ch√∫ng t√¥i! Th√¥ng tin tham gia c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n.</p>
                <p>D√π b·∫°n c√≥ tr√∫ng th∆∞·ªüng hay kh√¥ng, ch√∫ng t√¥i ƒë·ªÅu ƒë√°nh gi√° cao s·ª± tham gia c·ªßa b·∫°n. H√£y theo d√µi ƒë·ªÉ bi·∫øt th√™m c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i th√∫ v·ªã!</p>
                <p>Theo d√µi ch√∫ng t√¥i tr√™n m·∫°ng x√£ h·ªôi ƒë·ªÉ c·∫≠p nh·∫≠t tin t·ª©c v√† ∆∞u ƒë√£i m·ªõi nh·∫•t.</p>
            </div>
            <div class="footer">
                <p>H·ªá th·ªëng Phi·∫øu May m·∫Øn</p>
                <p>Truy c·∫≠p ch√∫ng t√¥i t·∫°i www.luckyvoucher.com</p>
            </div>
        </div>
    </body>
    </html>
    `;
  }

  /**
   * Test email configuration
   */
  async testEmailConfig() {
    if (!this.emailTransporter) {
      console.log("‚ö†Ô∏è Email not configured");
      return false;
    }

    try {
      await this.emailTransporter.verify();
      console.log("‚úÖ Email configuration is valid");
      return true;
    } catch (error) {
      console.error("‚ùå Email configuration error:", error);
      return false;
    }
  }
}

module.exports = NotificationService;
