generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id             String          @id @default(uuid()) @db.VarChar(36)
  fullName       String          @map("full_name") @db.VarChar(255)
  email          String?         @db.VarChar(255)
  phone          String?         @db.VarChar(20)
  address        String?         @db.VarChar(500)
  referralSource String?         @map("referral_source") @db.VarChar(100)
  createdAt      DateTime?       @default(now()) @map("created_at") @db.Timestamp(0)
  consentAt      DateTime?       @default(now()) @map("consent_at") @db.Timestamp(0)
  spinAttempts   SpinAttempt[]
  voucherCodes   VoucherCode[]
  deviceSessions DeviceSession[]

  @@index([email], map: "idx_email")
  @@index([phone], map: "idx_phone")
  @@map("user_profiles")
}

model Device {
  id              String            @id @default(uuid()) @db.VarChar(36)
  deviceFpHash    String            @unique(map: "device_fp_hash") @map("device_fp_hash") @db.VarChar(255)
  firstSeenAt     DateTime?         @default(now()) @map("first_seen_at") @db.Timestamp(0)
  lastSeenAt      DateTime?         @default(now()) @updatedAt @map("last_seen_at") @db.Timestamp(0)
  spinAttempts    SpinAttempt[]
  deviceSessions  DeviceSession[]

  @@index([deviceFpHash], map: "idx_device_fp")
  @@map("devices")
}

model DeviceSession {
  id          String       @id @default(uuid()) @db.VarChar(36)
  deviceId    String       @map("device_id") @db.VarChar(36)
  userId      String       @map("user_id") @db.VarChar(36)
  createdAt   DateTime?    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  device      Device       @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        UserProfile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deviceId], map: "unique_device_session")
  @@index([deviceId], map: "idx_device_id")
  @@index([userId], map: "idx_user_id")
  @@map("device_sessions")
}

model Voucher {
  id               String            @id @default(uuid()) @db.VarChar(36)
  name             String            @db.VarChar(255)
  description      String?           @db.Text
  faceValue        String            @map("face_value") @db.VarChar(255)
  voucherType      VoucherType?      @default(discount_percentage) @map("voucher_type")
  baseProbability  Decimal           @default(0.1000) @map("base_probability") @db.Decimal(10, 4)
  initialStock     Int               @default(0) @map("initial_stock")
  remainingStock   Int               @default(0) @map("remaining_stock")
  maxPerUser       Int?              @default(1) @map("max_per_user")
  validFrom        DateTime?         @map("valid_from") @db.Timestamp(0)
  validTo          DateTime?         @map("valid_to") @db.Timestamp(0)
  status           VoucherStatus?    @default(draft)
  codeGeneration   CodeGeneration?   @default(auto) @map("code_generation")
  codePrefix       String?           @default("LV") @map("code_prefix") @db.VarChar(10)
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  stockAdjustments StockAdjustment[]
  voucherCodes     VoucherCode[]

  @@index([status], map: "idx_status")
  @@index([validFrom, validTo], map: "idx_valid_period")
  @@map("vouchers")
}

model VoucherCode {
  id             String             @id @default(uuid()) @db.VarChar(36)
  voucherId      String             @map("voucher_id") @db.VarChar(36)
  code           String             @unique(map: "code") @db.VarChar(50)
  status         VoucherCodeStatus? @default(available)
  issuedToUserId String?            @map("issued_to_user_id") @db.VarChar(36)
  issuedAt       DateTime?          @map("issued_at") @db.Timestamp(0)
  redeemedAt     DateTime?          @map("redeemed_at") @db.Timestamp(0)
  createdAt      DateTime?          @default(now()) @map("created_at") @db.Timestamp(0)
  spinAttempts   SpinAttempt[]
  voucher        Voucher            @relation(fields: [voucherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "voucher_codes_ibfk_1")
  issuedToUser   UserProfile?       @relation(fields: [issuedToUserId], references: [id], onUpdate: NoAction, map: "voucher_codes_ibfk_2")

  @@index([code], map: "idx_code")
  @@index([status], map: "idx_status")
  @@index([voucherId], map: "idx_voucher")
  @@index([issuedToUserId], map: "issued_to_user_id")
  @@map("voucher_codes")
}

model SpinAttempt {
  id            String       @id @default(uuid()) @db.VarChar(36)
  userId        String       @map("user_id") @db.VarChar(36)
  deviceId      String       @map("device_id") @db.VarChar(36)
  outcome       SpinOutcome
  voucherId     String?      @map("voucher_id") @db.VarChar(36)
  voucherCodeId String?      @map("voucher_code_id") @db.VarChar(36)
  ipAddress     String?      @map("ip_address") @db.VarChar(45)
  userAgent     String?      @map("user_agent") @db.Text
  createdAt     DateTime?    @default(now()) @map("created_at") @db.Timestamp(0)
  user          UserProfile  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "spin_attempts_ibfk_1")
  device        Device       @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "spin_attempts_ibfk_2")
  voucherCode   VoucherCode? @relation(fields: [voucherCodeId], references: [id], onUpdate: NoAction, map: "spin_attempts_ibfk_5")

  @@unique([userId, deviceId], map: "unique_user_device_campaign")
  @@index([deviceId], map: "device_id")
  @@index([createdAt], map: "idx_created_at")
  @@index([outcome], map: "idx_outcome")
  @@index([voucherCodeId], map: "voucher_code_id")
  @@index([voucherId], map: "voucher_id")
  @@map("spin_attempts")
}

model Staff {
  id               String            @id @default(uuid()) @db.VarChar(36)
  email            String            @unique(map: "email") @db.VarChar(255)
  passwordHash     String            @map("password_hash") @db.VarChar(255)
  fullName         String            @map("full_name") @db.VarChar(255)
  role             StaffRole?        @default(STAFF)
  isActive         Boolean?          @default(true) @map("is_active")
  mfaSecret        String?           @map("mfa_secret") @db.VarChar(255)
  mfaEnabled       Boolean?          @default(false) @map("mfa_enabled")
  lastLoginAt      DateTime?         @map("last_login_at") @db.Timestamp(0)
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  auditLogs        AuditLog[]
  stockAdjustments StockAdjustment[]

  @@index([email], map: "idx_email")
  @@index([role], map: "idx_role")
  @@map("staff")
}

model AuditLog {
  id         String    @id @default(uuid()) @db.VarChar(36)
  actorId    String?   @map("actor_id") @db.VarChar(36)
  actorRole  ActorRole @map("actor_role")
  action     String    @db.VarChar(100)
  entityType String    @map("entity_type") @db.VarChar(50)
  entityId   String?   @map("entity_id") @db.VarChar(36)
  beforeData Json?     @map("before_data")
  afterData  Json?     @map("after_data")
  ipAddress  String?   @map("ip_address") @db.VarChar(45)
  userAgent  String?   @map("user_agent") @db.Text
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  actor      Staff?    @relation(fields: [actorId], references: [id], onUpdate: NoAction, map: "audit_logs_ibfk_1")

  @@index([actorId], map: "idx_actor")
  @@index([createdAt], map: "idx_created_at")
  @@index([entityType, entityId], map: "idx_entity")
  @@map("audit_logs")
}

model StockAdjustment {
  id            String    @id @default(uuid()) @db.VarChar(36)
  voucherId     String    @map("voucher_id") @db.VarChar(36)
  staffId       String    @map("staff_id") @db.VarChar(36)
  deltaAmount   Int       @map("delta_amount")
  reason        String?   @db.Text
  previousStock Int       @map("previous_stock")
  newStock      Int       @map("new_stock")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  voucher       Voucher   @relation(fields: [voucherId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "stock_adjustments_ibfk_1")
  staff         Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "stock_adjustments_ibfk_2")

  @@index([createdAt], map: "idx_created_at")
  @@index([voucherId], map: "idx_voucher")
  @@index([staffId], map: "staff_id")
  @@map("stock_adjustments")
}

model campaigns {
  id            String            @id @db.VarChar(36)
  name          String            @db.VarChar(255)
  status        campaigns_status? @default(draft)
  start_at      DateTime?         @db.Timestamp(0)
  end_at        DateTime?         @db.Timestamp(0)
  no_win_weight Decimal?          @default(0.1000) @db.Decimal(10, 4)
  created_at    DateTime?         @default(now()) @db.Timestamp(0)
  updated_at    DateTime?         @default(now()) @db.Timestamp(0)
}

model migrations {
  version     Int       @id
  name        String    @db.VarChar(255)
  executed_at DateTime? @default(now()) @db.Timestamp(0)
}

enum VoucherType {
  discount_percentage
  discount_amount
  free_product
}

enum VoucherStatus {
  draft
  active
  inactive
}

enum CodeGeneration {
  auto
  pre_seeded
}

enum VoucherCodeStatus {
  available
  issued
  redeemed
  expired
}

enum SpinOutcome {
  win
  lose
}

enum StaffRole {
  STAFF
  ADMIN
}

enum ActorRole {
  STAFF
  ADMIN
  SYSTEM
}

enum campaigns_status {
  draft
  active
  inactive
  ended
}
